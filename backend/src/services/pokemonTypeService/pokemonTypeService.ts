import { db } from '../../config/drizzle.config.js';
import { sql } from 'drizzle-orm';
import { pokemonReference } from '../../db/schema.js';
import { z } from 'zod';

export class PokemonTypeService {
  private static cachedTypes: string[] | null = null;
  private static cacheExpiry: number = 0;
  private static CACHE_DURATION = 60 * 60 * 1000; // 1 heure
  
  // ‚úÖ Types fallback si probl√®me DB
  private static FALLBACK_TYPES = [
    'Normal', 'Feu', 'Eau', 'Plante', '√âlectrik', 'Glace', 
    'Combat', 'Poison', 'Sol', 'Vol', 'Psy', 'Insecte', 
    'Roche', 'Spectre', 'Dragon', 'T√©n√®bres', 'Acier', 'F√©e'
  ];

  /**
   * R√©cup√®re tous les types Pokemon uniques depuis la base de donn√©es
   * avec cache pour optimiser les performances
   */
  static async getUniqueTypes(): Promise<string[]> {
    // ‚úÖ V√©rifier le cache
    if (this.cachedTypes && Date.now() < this.cacheExpiry) {
      console.log('üéØ Types Pokemon r√©cup√©r√©s depuis le cache');
      return this.cachedTypes;
    }

    try {
      console.log('üîÑ R√©cup√©ration des types Pokemon depuis la base...');
      
      const result = await db
        .selectDistinct({ type: pokemonReference.type })
        .from(pokemonReference);
      
      const types = result
        .map(row => row.type)
        .filter(Boolean)
        .sort();
      
      if (types.length === 0) {
        console.warn('‚ö†Ô∏è Aucun type trouv√© en DB, utilisation du fallback');
        return this.FALLBACK_TYPES;
      }
      
      // ‚úÖ Mettre en cache
      this.cachedTypes = types;
      this.cacheExpiry = Date.now() + this.CACHE_DURATION;
      
      console.log(`‚úÖ ${types.length} types Pokemon r√©cup√©r√©s:`, types);
      return types;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration types Pokemon:', error);
      // ‚úÖ Fallback en cas d'erreur
      return this.FALLBACK_TYPES;
    }
  }

  /**
   * Valide qu'un type Pokemon existe en base de donn√©es
   */
  static async isValidType(type: string): Promise<boolean> {
    const validTypes = await this.getUniqueTypes();
    return validTypes.includes(type);
  }

  /**
   * Valide plusieurs types Pokemon
   */
  static async areValidTypes(types: string[]): Promise<{ valid: boolean; invalidTypes: string[] }> {
    const validTypes = await this.getUniqueTypes();
    const invalidTypes = types.filter(type => !validTypes.includes(type));
    
    return {
      valid: invalidTypes.length === 0,
      invalidTypes
    };
  }

  /**
   * Cr√©e un sch√©ma Zod enum dynamique bas√© sur les types en BDD
   */
  static async createPokemonTypeSchema() {
    const types = await this.getUniqueTypes();
    
    if (types.length === 0) {
      throw new Error('Aucun type Pokemon trouv√© en base de donn√©es');
    }
    
    // ‚úÖ Cr√©er un enum Zod dynamique
    const firstType = types[0];
    const otherTypes = types.slice(1) as [string, ...string[]];
    
    return z.enum([firstType, ...otherTypes]);
  }

  /**
   * Invalide le cache (utile apr√®s ajout de nouveaux Pokemon)
   */
  static invalidateCache(): void {
    this.cachedTypes = null;
    this.cacheExpiry = 0;
    console.log('üóëÔ∏è Cache des types Pokemon invalid√©');
  }

  /**
   * R√©cup√®re les statistiques du cache
   */
  static getCacheStats(): { cached: boolean; expiry: Date | null; typesCount: number } {
    return {
      cached: this.cachedTypes !== null && Date.now() < this.cacheExpiry,
      expiry: this.cacheExpiry > 0 ? new Date(this.cacheExpiry) : null,
      typesCount: this.cachedTypes?.length || 0
    };
  }
} 