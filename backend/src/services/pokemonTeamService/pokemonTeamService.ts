import { eq, and } from "drizzle-orm";
import { pokemon, pokemonReference } from "../../db/schema.js";
import { Create, Delete, GetMany } from "../../db/crud/crud.js";
import { db } from '../../config/drizzle.config.js';
import { TeamService } from "../createTeamService/teamService.js";
import { mapPokemonToApi, type PokemonWithReferenceDB } from "../../mapper/pokemon.mapper.js";
import type { Pokemon } from '@pokemon-battle/shared';
import { z } from "zod";
import { serviceWrapper } from '../../utils/asyncWrapper.js';
import { ValidationError, NotFoundError } from '../../models/errors.js';
import { addPokemonToTeamSchema, removePokemonFromTeamSchema, teamIdSchema } from '../../schemas/index.js';
import { userIdSchema } from '../../schemas/common.schemas.js';

const MAX_POKEMON_PER_TEAM = 6;

// ‚úÖ SERVICE POKEMON - Gestion des Pokemon dans les √©quipes UNIQUEMENT
export class PokemonTeamService {

  /**
   * R√©cup√©rer tous les Pokemon d'une √©quipe
   */
  static async getTeamPokemon(teamId: number): Promise<Pokemon[]> {
    return serviceWrapper(async () => {
      // ‚úÖ Utiliser le sch√©ma centralis√©
      teamIdSchema.parse(teamId);

      const result = await db
        .select({
          // Pokemon data
          pokemon: pokemon,
          // Pokemon reference data  
          pokemon_reference: pokemonReference
        })
        .from(pokemon)
        .innerJoin(pokemonReference, eq(pokemon.pokemon_reference_id, pokemonReference.id))
        .where(eq(pokemon.team_id, teamId));
        
      // ‚úÖ Utiliser le mapper Pokemon unifi√©
      return result.map(row => mapPokemonToApi({
        ...row.pokemon,
        pokemon_reference: row.pokemon_reference
      } as PokemonWithReferenceDB));
    });
  }

  /**
   * Compter le nombre de Pokemon dans une √©quipe
   */
  static async getTeamPokemonCount(teamId: number): Promise<number> {
    return serviceWrapper(async () => {
      // ‚úÖ Valider l'entr√©e
      teamIdSchema.parse(teamId);

      const teamPokemon = await GetMany<typeof pokemon.$inferSelect>(pokemon, eq(pokemon.team_id, teamId));
      return teamPokemon.length;
    });
  }

  /**
   * R√©cup√©rer une r√©f√©rence Pokemon par ID PokeAPI
   */
  static async getPokemonReference(pokemonId: number) {
    return serviceWrapper(async () => {
      const existing = await db
        .select()
        .from(pokemonReference)
        .where(eq(pokemonReference.pokeapi_id, pokemonId))
        .limit(1);
      
      if (existing.length === 0) {
        throw new NotFoundError(`Pok√©mon ${pokemonId} non trouv√© dans la base de donn√©es. Assurez-vous que le seed a √©t√© ex√©cut√©.`);
      }
      
      return existing[0];
    });
  }

  /**
   * Ajouter un Pokemon √† une √©quipe
   */
  static async addPokemonToTeam(teamId: number, pokemonId: number, userId: number) {
    return serviceWrapper(async () => {
      // ‚úÖ Utiliser le sch√©ma centralis√©
      const validatedData = addPokemonToTeamSchema.parse({ teamId, pokemonId, userId });

      // ‚úÖ Utiliser la m√©thode existante qui fonctionne d√©j√†
      const isOwner = await TeamService.verifyTeamOwnership(validatedData.teamId, validatedData.userId);
      if (!isOwner) {
        throw new NotFoundError('√âquipe non trouv√©e ou non autoris√©e');
      }

      // V√©rifier la limite
      const currentCount = await this.getTeamPokemonCount(validatedData.teamId);
      if (currentCount >= MAX_POKEMON_PER_TEAM) {
        throw new ValidationError(`L'√©quipe ne peut contenir que ${MAX_POKEMON_PER_TEAM} Pok√©mon maximum`);
      }

      // ‚úÖ R√©cup√©rer la r√©f√©rence Pokemon
      const pokemonRef = await this.getPokemonReference(validatedData.pokemonId);

      // ‚úÖ V√©rifier les doublons
      const existingPokemon = await GetMany<typeof pokemon.$inferSelect>(pokemon, eq(pokemon.team_id, validatedData.teamId));
      const isDuplicate = existingPokemon.some(p => p.pokemon_reference_id === pokemonRef.id);
      
      if (isDuplicate) {
        throw new ValidationError('Ce Pok√©mon est d√©j√† dans l\'√©quipe');
      }

      // ‚úÖ Cr√©er le Pokemon avec les stats de base
      const pokemonData = {
        pokemon_reference_id: pokemonRef.id,
        level: 1,
        hp: pokemonRef.base_hp || 100,
        attack: pokemonRef.base_attack || 50,
        defense: pokemonRef.base_defense || 50,
        speed: pokemonRef.base_speed || 50,
        team_id: teamId,
      };
      
      return Create(pokemon, pokemonData);
    });
  }

  /**
   * Retirer un Pokemon d'une √©quipe
   */
  static async removePokemonFromTeam(teamId: number, pokemonPokeApiId: number, userId: number) {
    return serviceWrapper(async () => {
      console.log('üóëÔ∏è === REMOVE POKEMON SERVICE APPEL√â ===');
      console.log('üîç Param√®tres:', { teamId, pokemonPokeApiId, userId });
      
      if (!teamId || !pokemonPokeApiId) {
        throw new ValidationError('teamId et pokemonPokeApiId sont requis');
      }

      // ‚úÖ V√©rifier que l'√©quipe appartient √† l'utilisateur
      const isOwner = await TeamService.verifyTeamOwnership(teamId, userId);
      if (!isOwner) {
        throw new NotFoundError('√âquipe non trouv√©e ou non autoris√©e');
      }

      // ‚úÖ Trouver la r√©f√©rence Pokemon par PokeAPI ID
      console.log('üîç Recherche r√©f√©rence Pokemon pour PokeAPI ID:', pokemonPokeApiId);
      const pokemonRef = await this.getPokemonReference(pokemonPokeApiId);
      console.log('‚úÖ R√©f√©rence trouv√©e:', pokemonRef);
      
      // ‚úÖ Supprimer le Pokemon de l'√©quipe
      console.log('üóëÔ∏è Suppression Pokemon de l\'√©quipe:', { teamId, pokemon_reference_id: pokemonRef.id });
      const result = await Delete(pokemon, and(
        eq(pokemon.team_id, teamId), 
        eq(pokemon.pokemon_reference_id, pokemonRef.id)
      )!);
      
      console.log('‚úÖ Pokemon supprim√© avec succ√®s');
      return result;
    });
  }

  /**
   * R√©cup√©rer les √©quipes avec leurs Pokemon (m√©thode utilitaire)
   */
  static async getTeamsWithPokemon(userId: number) {
    return serviceWrapper(async () => {
      const teams = await TeamService.getTeamsByUserId(userId);
      
      const teamsWithPokemon = await Promise.all(
        teams.map(async (team) => {
          const teamPokemon = await this.getTeamPokemon(team.id).catch(error => {
            console.error(`Erreur r√©cup√©ration Pokemon √©quipe ${team.id}:`, error);
            return [];
          });
          
          return {
            ...team,
            pokemon: teamPokemon || []
          };
        })
      );
      
      return teamsWithPokemon;
    });
  }

  static async deletePokemonSelection(teamId: number, pokemonId: number) {
    return serviceWrapper(async () => {
      return Delete(pokemon, and(
        eq(pokemon.team_id, teamId), 
        eq(pokemon.pokemon_reference_id, pokemonId)
      )!);
    });
  }
}

// ‚úÖ Exports pour r√©trocompatibilit√©
export const createPokemonSelection = PokemonTeamService.addPokemonToTeam;
export const deletePokemonSelection = PokemonTeamService.removePokemonFromTeam;
export const getTeamPokemon = PokemonTeamService.getTeamPokemon;
export const getTeamPokemonCount = PokemonTeamService.getTeamPokemonCount;
export const getTeamsWithPokemon = PokemonTeamService.getTeamsWithPokemon; 