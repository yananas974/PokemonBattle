import type { Context } from "hono";
import { TeamService } from "../services/createTeamService/teamService.js"; 
import { PokemonTeamService } from "../services/pokemonTeamService/pokemonTeamService.js";



// ‚úÖ Handlers temporaires sans logique complexe
export const getTeamsHandler = async (c: Context) => {
  console.log('üèÜ === GET TEAMS HANDLER APPEL√â ===');
  
  try {
    const user = c.get('user') as any;
    console.log('üë§ Utilisateur dans GET TEAMS:', user ? user.email : 'AUCUN');
    
    if (!user?.id) {
      return c.json({ success: false, error: 'User not authenticated' }, 401);
    }

    // ‚úÖ UTILISER LE SERVICE AVEC POK√âMONS INCLUS
    console.log('üîç R√©cup√©ration des √©quipes avec Pok√©mons pour utilisateur:', user.id);
    const teamsWithPokemon = await PokemonTeamService.getTeamsWithPokemon(user.id);
    console.log('‚úÖ √âquipes avec Pok√©mons r√©cup√©r√©es:', teamsWithPokemon.length);
    
    // Afficher les d√©tails pour debug
    teamsWithPokemon.forEach(team => {
      console.log(`üìã √âquipe "${team.teamName}": ${team.pokemon?.length || 0} Pok√©mons`);
      if (team.pokemon && team.pokemon.length > 0) {
        team.pokemon.forEach(pokemon => {
          console.log(`  - ${pokemon.name} (#${pokemon.pokemon_id})`);
        });
      }
    });
    
    return c.json({
      success: true,
      teams: teamsWithPokemon
    });
  } catch (error) {
    console.error('‚ùå Erreur dans getTeamsHandler:', error);
    return c.json({ 
      success: false, 
      error: 'Failed to fetch teams' 
    }, 500);
  }
};

export const createTeamHandler = async (c: Context) => {
  console.log('üèÜ === CREATE TEAM HANDLER APPEL√â ===');
  
  try {
    const user = c.get('user') as any;
    const data = await c.req.json();
    
    if (!user?.id) {
      return c.json({ success: false, error: 'User not authenticated' }, 401);
    }

    // ‚úÖ UTILISER LE VRAI SERVICE
    const team = await TeamService.createTeam(data, user.id);
    
    return c.json({
      success: true,
      message: 'Team created successfully',
      team
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans createTeamHandler:', error);
    return c.json({ 
      success: false, 
      error: error.message || 'Failed to create team' 
    }, 500);
  }
};

// ‚úÖ Handlers temporaires sans logique complexe
export const deleteTeamHandler = async (c: Context) => {
  console.log('üóëÔ∏è === DELETE TEAM HANDLER APPEL√â ===');
  
  try {
    const user = c.get('user') as any;
    const teamId = parseInt(c.req.param('id'));
    
    console.log('üë§ Utilisateur dans DELETE TEAM:', user ? user.email : 'AUCUN');
    console.log('üîç Team ID √† supprimer:', teamId);
    
    if (!user?.id) {
      return c.json({ success: false, error: 'User not authenticated' }, 401);
    }

    if (!teamId || isNaN(teamId)) {
      return c.json({ success: false, error: 'ID d\'√©quipe invalide' }, 400);
    }

    // ‚úÖ V√©rifier que l'√©quipe appartient √† l'utilisateur
    const isOwner = await TeamService.verifyTeamOwnership(teamId, user.id);
    if (!isOwner) {
      return c.json({ success: false, error: '√âquipe non trouv√©e ou non autoris√©e' }, 404);
    }

    // ‚úÖ Supprimer l'√©quipe (les Pok√©mon seront supprim√©s automatiquement par CASCADE)
    await TeamService.deleteTeam(teamId);
    
    console.log('‚úÖ √âquipe supprim√©e avec succ√®s:', teamId);
    
    return c.json({
      success: true,
      message: '√âquipe supprim√©e avec succ√®s'
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans deleteTeamHandler:', error);
    return c.json({ 
      success: false, 
      error: error.message || 'Failed to delete team' 
    }, 500);
  }
};

export const addPokemonToTeamHandler = async (c: Context) => {
  console.log('üèÜ === ADD POKEMON HANDLER APPEL√â ===');
  
  try {
    const user = c.get('user') as any;
    const data = await c.req.json();
    
    if (!user?.id) {
      return c.json({ success: false, error: 'User not authenticated' }, 401);
    }

    // ‚úÖ R√©cup√©rer teamId depuis les param√®tres d'URL
    const teamId = c.req.param('teamId');
    const pokemonId = data.pokemonId;

    console.log('üîç TeamId depuis URL:', teamId);
    console.log('üîç PokemonId depuis body:', pokemonId);

    if (!teamId || !pokemonId) {
      return c.json({ 
        success: false, 
        error: 'TeamId et PokemonId sont requis' 
      }, 400);
    }

    const result = await PokemonTeamService.addPokemonToTeam(
      Number(teamId), 
      Number(pokemonId), 
      user.id
    );
    
    return c.json({
      success: true,
      message: 'Pok√©mon ajout√© √† l\'√©quipe avec succ√®s',
      pokemon: result
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans addPokemonToTeamHandler:', error);
    return c.json({ 
      success: false, 
      error: error.message || 'Failed to add pokemon' 
    }, 500);
  }
};

export const removePokemonFromTeamHandler = async (c: Context) => {
  console.log('üóëÔ∏è === REMOVE POKEMON HANDLER APPEL√â ===');
  
  try {
    const user = c.get('user') as any;
    const teamId = parseInt(c.req.param('teamId'));
    const pokemonId = parseInt(c.req.param('pokemonId'));
    
    console.log('üë§ Utilisateur dans REMOVE POKEMON:', user ? user.email : 'AUCUN');
    console.log('üîç Team ID:', teamId);
    console.log('üîç Pokemon ID:', pokemonId);
    
    if (!user?.id) {
      return c.json({ success: false, error: 'User not authenticated' }, 401);
    }

    if (!teamId || !pokemonId || isNaN(teamId) || isNaN(pokemonId)) {
      return c.json({ 
        success: false, 
        error: 'ID d\'√©quipe et ID de Pok√©mon valides requis' 
      }, 400);
    }

    // ‚úÖ Utiliser le service PokemonTeamService pour supprimer le Pok√©mon
    await PokemonTeamService.removePokemonFromTeam(teamId, pokemonId, user.id);
    
    console.log('‚úÖ Pok√©mon supprim√© avec succ√®s de l\'√©quipe:', { teamId, pokemonId });
    
    return c.json({
      success: true,
      message: 'Pok√©mon retir√© de l\'√©quipe avec succ√®s'
    });
  } catch (error: any) {
    console.error('‚ùå Erreur dans removePokemonFromTeamHandler:', error);
    return c.json({ 
      success: false, 
      error: error.message || 'Failed to remove pokemon from team' 
    }, 500);
  }
};

